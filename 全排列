问题一

问题描述：
          给定一个不含重复数字的数组 nums  返回其 所有可能的全排列 你可以 按任意顺序 返回答案
          输入：nums = [1,2,3]
          输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

分析：
          从i开始，i后面的元素都可以和i位置的元素进行交换，但是[0~i-1]位置的元素固定不能变，当i等于数组的长度的时候，当前数组的样子就是一种结果，再还原数组到初始状态
          
          深度优先遍历

代码实现：

             class Solution {
                   public void permute(int[] nums,int i,List<int> list) {
                      if(i==num.length){
                          list.add(nums);
                       }
                      for(int j=i;j<nums.length;j++){
                          wape(nums,i,j);
                          permute(num,i+1,list);
                          wape(nums,i,j);
                      }
                    }
                  public static void wape(int [] nums,int i,int j){
                  int temp = nums[i];
                  nums[i]=num[j];
                   num[j]=temp;
                 }
            }



问题2

问题描述：
          给定一个可包含重复数字的序列 nums ，按任意顺序 返回所有不重复的全排列。
          输入：nums = [1,1,2]
          输出：
          [[1,1,2],
          [1,2,1],
          [2,1,1]]

分析：
              基本上和问题一的思路相同，当是题目要求返回不重复的重排列，也就是说在i位置num出现了一次，在后面的交换中num就不能再和i位置的元素交换，因为当前的结果已经存在过了
          这里就可以使用分支限界的思想，定义一个boolean类型的数组，数组的长度为19，因为数字的范围是（-9~9），初始的状态都是为false，都没有出现过，当出现过一次，就把当前
          位置的值置为true，后面再碰到相同值时，在boolean数组中一比对发现值为true就不会走下面的分支
          
          递归+分支限界
          
代码实现：

class Solution {
    /**
     * 全排列要求不重复：递归+分支限界
     * 当前位置存在i的话，后面的i不能与当前i位置做交换
     * @param nums
     * @return
     */
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<Integer> list = new ArrayList<>();
        List<List<Integer>> lists = new ArrayList<>();
        for (int num:nums){
            list.add(num);
        }
        int n = nums.length;
        presses(n,0,list,lists);
        return lists;
    }
public static void presses (int n,int k,List<Integer> list,List<List<Integer>> lists){
        if(k==n){
            lists.add(new ArrayList<Integer>(list));
            return;
        }
         boolean [] visit = new boolean[19];
         for (int i = k; i <n ; i++) {
             if(!visit[list.get(i)+9]){
                 Collections.swap(list,k,i);
                 presses(n,k+1,list,lists);
                 Collections.swap(list,k,i);
                 visit[list.get(i)+9]=true;
             }
         }
     }
}

